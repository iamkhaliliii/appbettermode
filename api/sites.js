// api/sites.js
import { db } from '../server/db/index.js';
import { sites } from '../server/db/schema.js';
// import { eq, desc } from 'drizzle-orm'; 

export default async function handler(req, res) {
  if (req.method === 'GET') {
    try {
      // TODO: Add authentication and filter sites by user (e.g., using ownerId)
      // Example: const userSites = await db.select().from(sites).where(eq(sites.ownerId, authenticatedUserId));
      const allSites = await db.select().from(sites);
      res.status(200).json(allSites);
    } catch (error) {
      console.error('Error fetching sites from Supabase:', error);
      // It's good to include more error details for server-side logs,
      // but be careful about exposing too much detail in the client response.
      res.status(500).json({ 
        message: 'Error fetching sites from database', 
        // Only include error.message in dev, or a generic message in prod for the client
        error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error', 
        code: error.code, 
        // detail: error.detail // Be cautious with exposing detail
      });
    }
  } else if (req.method === 'POST') {
    try {
      let parsedBody;
      if (typeof req.body === 'string') {
        try { 
          parsedBody = JSON.parse(req.body); 
        } catch (e) {
          return res.status(400).json({ message: 'Invalid JSON in request body string' });
        }
      } else if (typeof req.body === 'object' && req.body !== null) {
        parsedBody = req.body;
      } else {
        return res.status(400).json({ message: 'Request body must be a JSON object.'});
      }

      const { name, subdomain } = parsedBody;

      if (!name) {
        return res.status(400).json({ message: 'Site name is required.'});
      }

      // --- !!! IMPORTANT: Replace with actual authenticated user ID !!! ---
      // This is a placeholder. In a real app, you'd get this from session/token.
      const ownerIdPlaceholder = '00000000-0000-0000-0000-000000000000'; // Example UUID
      // const actualOwnerId = await getUserIdFromAuth(req); 
      // if (!actualOwnerId) {
      //   return res.status(401).json({ message: 'Unauthorized - User ID not found' });
      // }
      // --- !!! END IMPORTANT !!! ---

      const defaultState = 'active'; // Or 'pending', based on your application logic

      const newSiteArray = await db.insert(sites).values({
        name,
        subdomain: subdomain || null,
        ownerId: ownerIdPlaceholder, // In production, use actualOwnerId
        state: defaultState,
        // id should be generated by the DB (e.g., default gen_random_uuid())
        // createdAt and updatedAt should also be handled by DB defaults ideally
      }).returning();

      if (newSiteArray.length === 0) {
        console.error('Site creation did not return the new site. This might indicate an issue with .returning() or the insert.');
        return res.status(500).json({ message: 'Error creating site: No record returned after insert.' });
      }

      res.status(201).json(newSiteArray[0]);

    } catch (error) {
      console.error('Error creating site in Supabase:', error);
      if (error.code === '23505') { // PostgreSQL unique_violation error code
         const field = error.constraint && error.constraint.includes('subdomain') ? 'subdomain' : 'unique field';
         return res.status(409).json({ 
           message: `A site with this ${field} already exists.`, 
           field, 
           // detail: error.detail // Be cautious exposing full DB error details
         });
      }
      // For other errors:
      res.status(500).json({ 
        message: 'Error creating site in database', 
        error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error', 
        code: error.code 
      });
    }
  } else {
    res.setHeader('Allow', ['GET', 'POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}